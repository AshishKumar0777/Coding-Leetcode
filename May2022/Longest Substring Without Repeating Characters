Given a string s, find the length of the longest substring without repeating characters. 

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring. 

Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLength = 0;
        /*
        for(int i = 0; i < s.length(); i++){
            int count = 0;
            Set<Character> set = new HashSet<>();
            
            for(int j = i; j < s.length(); j++){
                if(set.contains(s.charAt(j))){
                    break;
                }else{
                    set.add(s.charAt(j));
                    count++;
                }
            }
            maxLength = Math.max(count, maxLength);
        }
        
        return maxLength;
        */
        
        int[] freq = new int[256];
        int start = 0;
        int i = 0;
        
        while(i < s.length()){
            int index = s.charAt(i);
            freq[index]++;
            
            while(freq[index] > 1){
                int sIndex = s.charAt(start);
                freq[sIndex]--;
                start++;
            }
            
            int currLength = i - start + 1;
            maxLength = Math.max(maxLength, currLength);
            i++;
        }
        
        return maxLength;
    }
}
