Given a string s, return the number of palindromic substrings in it.
A string is a palindrome when it reads the same backward as forward.
A substring is a contiguous sequence of characters within the string. 

Example 1:
Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

Example 2:
Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa". 

Constraints:
1 <= s.length <= 1000
s consists of lowercase English letters.

class Solution {
    public int countSubstrings(String s) {
        /*
        int count = 0;
        
        for(int i = 0; i < s.length(); i++){
            for(int j = i+1; j <= s.length(); j++){
                if(isPalindrome(s.substring(i, j))){
                    count++;
                }
            }
        }
        return count;
    }
    
    private boolean isPalindrome(String s){
        int i = 0;
        int j = s.length()-1;
        
        while(i < j){
            if(s.charAt(i) != s.charAt(j)) return false;
            i++;
            j--;
        }
        
        return true;
        */
        
        int totalCount = 0;
        
        for(int i = 0; i < s.length(); i++){
            totalCount += getTotalCount(i, i, s);
            
            totalCount += getTotalCount(i, i+1, s);
        }
        return totalCount;
    }
    
    private int getTotalCount(int start, int end, String s){
        int count = 0;
        while(start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)){
            count++;
            start--;
            end++;
        }
        
        return count;
    }
}
