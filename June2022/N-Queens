The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively. 

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]] 

Constraints:
1 <= n <= 9

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        
        char[][] chess = new char[n][n];
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                chess[i][j] = '.';
            }
        }
        
        placeQueens(ans, chess, 0);
        return ans;
    }
    
    private void placeQueens(List<List<String>> ans, char[][] chess, int row){
        if(row == chess.length){
            ans.add(build(chess));
            return;
        }
        
        for(int col = 0; col < chess.length; col++){
            if(isValid(chess, row, col)){
                chess[row][col] = 'Q';
                placeQueens(ans, chess, row + 1);
                chess[row][col] = '.';
            }
        }
    }
    
    private boolean isValid(char[][] chess, int row, int col){
        
        //Check the column
        for(int i = 0; i < row; i++){
            if(chess[i][col] == 'Q'){
                return false;
            }
        }
        
        //Check for 45degree position
        for(int i = row - 1, j = col + 1; i >= 0 && j < chess.length; i--, j++){
            if(chess[i][j] == 'Q'){
                return false;
            }
        }
        
        //Check for 135 degree
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){
            if(chess[i][j] == 'Q'){
                return false;
            }
        }
        
        return true;
    }
    
    private static List<String> build(char[][] chess){
        List<String> path = new ArrayList<>();
        
        for(int i = 0; i < chess.length; i++){
            path.add(new String(chess[i]));
        }
        
        return path;
    }
}
