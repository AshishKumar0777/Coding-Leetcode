Given a pointer to the root of a binary tree, print the top view of the binary tree.
The tree as seen from the top the nodes, is called the top view of the tree.

For example :

   1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
Top View : 1 2 5 6

Complete the function  and print the resulting values on a single line separated by space.
Input Format
You are given a function,

void topView(node * root) {

}
Constraints

 Nodes in the tree  

Output Format 1 2 5 6

Print the values on a single line separated by space.

Sample Input

   1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
Sample Output

1 2 5 6

Explanation

   1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
From the top, only 1 2 5 6 nodes  are visible.

import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

	/* 
    
    class Node 
    	int data;
    	Node left;
    	Node right;
	*/
	public static void topView(Node root) {
      TreeMap<Integer, Integer> tmap = new TreeMap<>();
      levelOrder(root, 0, tmap);
    //   List<Integer> res = new ArrayList<>(tmap.values());
      
      for(int r : tmap.keySet()){
          System.out.print(tmap.get(r) + " ");
      }
      
    }

    private static void levelOrder(Node root, int idx, TreeMap<Integer, Integer> tmap){
        Queue<Node> qu = new LinkedList<>();
        Queue<Integer> lines = new LinkedList<>();
        
        qu.add(root);
        lines.add(idx);
        
        while(qu.size() > 0){
            Node node = qu.poll();
            int line = lines.poll();
            
            if(!tmap.containsKey(line)) tmap.put(line, node.data);
            
            if(node.left != null){
                qu.add(node.left);
                lines.add(line-1);
            }
            
            if(node.right != null){
                qu.add(node.right);
                lines.add(line+1);
            }
        }
    }
    
	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        topView(root);
    }	
}
