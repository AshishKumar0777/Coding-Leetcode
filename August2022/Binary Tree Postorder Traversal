Given the root of a binary tree, return the postorder traversal of its nodes' values. 

Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1] 

Constraints:
The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        
        Stack<TreeNode> stack1 = new Stack<>();
        Stack<TreeNode> stack2 = new Stack<>();
        
        if(root == null) return res;
        stack1.push(root);
        
        while(!stack1.isEmpty()){
            TreeNode temp = stack1.pop();
            stack2.add(temp);
            
            if(temp.left != null) stack1.push(temp.left);
            if(temp.right != null) stack1.push(temp.right);
        }
        
        while(!stack2.isEmpty()){
            res.add(stack2.pop().val);
        }
        
        return res;
    }
}
