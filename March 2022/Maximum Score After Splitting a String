Example 1:
Input: s = "011101"
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = "0" and right = "11101", score = 1 + 4 = 5 
left = "01" and right = "1101", score = 1 + 3 = 4 
left = "011" and right = "101", score = 1 + 2 = 3 
left = "0111" and right = "01", score = 1 + 1 = 2 
left = "01110" and right = "1", score = 2 + 1 = 3

Example 2:
Input: s = "00111"
Output: 5
Explanation: When left = "00" and right = "111", we get the maximum score = 2 + 3 = 5

Example 3:
Input: s = "1111"
Output: 3

class Solution {
    public int maxScore(String s) {
    /*
        int sum = 0, left = 0, max = 0;
        for(int i = 0; i < s.length(); i++){
            sum += Integer.parseInt(String.valueOf(s.charAt(i)));
        }
        
        int right = sum;
        for(int i = 0; i < s.length() - 1; i++){
            int t = Integer.parseInt(String.valueOf(s.charAt(i)));
            int temp = sum;            
            if(temp - t == sum){
                left++;
            }else{
                right--;
            }
            
            int ans = left + right;
            max = Math.max(ans, max);
            sum = temp;
        }
        return max;
        */
        
        int count_0 = 0, count_1 = 0, max = 0;
        
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '1')
                count_1++;
        }
        
        for(int i = 0; i < s.length() - 1; i++){
            if(s.charAt(i) == '0'){
                count_0++;
            }else{
                count_1--;
            }
            max = Math.max(max, count_0 + count_1);
        }
        return max;
        
        int sum = 0, left = 0, max = 0;
        for(int i = 0; i < s.length(); i++){
            sum += s.charAt(i) - '0';
        }
        
        int right = sum;
        for(int i = 0; i < s.length() - 1; i++){
            int t = s.charAt(i) - '0';
            int temp = sum;            
            if(temp - t == sum){
                left++;
            }else{
                right--;
            }
            
            int ans = left + right;
            max = Math.max(ans, max);
            sum = temp;
        }
        return max;
    }
}
