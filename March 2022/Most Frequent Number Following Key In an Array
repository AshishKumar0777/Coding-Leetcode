Example 1:
Input: nums = [1,100,200,1,100], key = 1
Output: 100
Explanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.
No other integers follow an occurrence of key, so we return 100.

Example 2:
Input: nums = [2,2,2,2,3], key = 2
Output: 2
Explanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.
For target = 3, there is only one occurrence at index 4 which follows an occurrence of key.
target = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.

class Solution {
    public int mostFrequent(int[] nums, int key) {
    /*
        int max = 0, ans = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length - 1; i++){
            if(nums[i] == key){
                map.put(nums[i + 1], map.getOrDefault(nums[i + 1], 0) + 1);
            }
        }
        
        for(int k : map.keySet()){
            if(map.get(k) > max){
                max = map.get(k);
                ans = k;
            }
        }
        return ans;
        */
        
        int[] arr = new int[1001];
        
        for(int i = 1; i < nums.length; i++){
            if(nums[i - 1] == key){
                arr[nums[i]]++;
            }
        }
        
        int ans = 0;
        for(int i = 1; i < arr.length; i++){
            if(arr[i] > arr[ans]){
                ans = i;
            }
        }
        return ans;
    }
}
