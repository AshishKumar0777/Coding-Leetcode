Given an array of integers nums, half of the integers in nums are odd, and the other half are even.
Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.
Return any answer array that satisfies this condition.

Example 1:
Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.

Example 2:
Input: nums = [2,3]
Output: [2,3]

class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        ArrayList<Integer> l1 = new ArrayList<>();
        ArrayList<Integer> l2 = new ArrayList<>();
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] % 2 == 0)
                l1.add(nums[i]);
            else
                l2.add(nums[i]);
        }
        
        int k = 0, l = 0;
        
        for(int i = 0; i < nums.length; i++){
            if(i % 2 == 0){
                nums[i] = l1.get(k);
                k++;
            }else{
                nums[i] = l2.get(l);
                l++;
            }
        }
        return nums;
    }
}
