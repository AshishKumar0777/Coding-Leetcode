Example 1:
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:
Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:
Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

class Solution {
    public String minRemoveToMakeValid(String s) {
        /*
        Stack<Pair<Character, Integer>> st = new Stack<>();
        
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(c == ')' || c == '('){
                if(st.isEmpty()){
                    st.push(new Pair<>(c, i));
                }else{
                    if(c == ')' && st.peek().getKey() == '('){
                        st.pop();
                    }else{
                        st.push(new Pair<>(c, i));
                    }
                }
            }
        }        
        Set<Integer> indexesToBeRemoved = new HashSet<>();
        while(!st.isEmpty()){
            indexesToBeRemoved.add(st.peek().getValue());
            st.pop();
        }
        
        String ans = "";
        for(int i = 0; i < s.length(); i++){
            if(!indexesToBeRemoved.contains(i)){
                ans += s.charAt(i);
            }
        }
        return ans;
        */
        
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            
            if(Character.isAlphabetic(c)) continue;
            if(c == '('){
                st.push(i);
            }else{
                if(!st.isEmpty() && s.charAt(st.peek()) == '('){
                    st.pop();
                }else{
                    st.push(i);
                }
            }
        }
        
        Set<Integer> set = new HashSet<>(st);
        
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(!set.contains(i)){
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
}
