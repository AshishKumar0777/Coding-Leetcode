Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.
Write an algorithm to minimize the largest sum among these m subarrays. 

Example 1:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

Example 2:
Input: nums = [1,2,3,4,5], m = 2
Output: 9

Example 3:
Input: nums = [1,4,4], m = 3
Output: 4

class Solution {
    public int splitArray(int[] nums, int m) {
        int maxNo = -1;
        int total = 0;
        
        for(int n : nums){
            maxNo = Math.max(n, maxNo);
            total += n;
        }
        
        long low = maxNo;
        long high = total;
        
        while(low < high){
            long mid = (low) + (high - low)/2;
            if(validDivisonPossible(mid, nums, m)){
                high = mid;
            }else{
                low = mid + 1;
            }
        }
        return (int)(low);
    }
    
    public boolean validDivisonPossible(long maxPossibleSum, int[] nums, int m){
        int totalSubset = 1;
        int totalRunningSum = 0;
        
        for(int el : nums){
            totalRunningSum += el;
            
            if(totalRunningSum > maxPossibleSum){
                totalRunningSum = 0;
            totalRunningSum += el;
                
                totalSubset++;
                
                if(totalSubset > m)
                    return false;
            }
        }
        return true;
    }
}
