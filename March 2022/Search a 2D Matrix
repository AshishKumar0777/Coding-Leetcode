Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row. 

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int xLen = matrix.length;
        if(xLen == 0) return false;
        
        int yLen = matrix[0].length;
        if(yLen == 0) return false;
        
        int i = xLen - 1, j = 0;
        while(i >= 0 && matrix[i][j] > target){
            i--;
        }
        
        if(i < 0) return false;
        
        int[] submatrix = matrix[i];
        int index = binarySearch(submatrix, target);
        
        if(index >= 0)
            return true;
        else
            return false;
    }
    
    private int binarySearch(int[] submatrix, int target){
        int low = 0, high = submatrix.length - 1;
        
        while(low <= high){
            int mid = low + (high - low) / 2;
            
            if(submatrix[mid] == target)
                return mid;
            else if(submatrix[mid] < target){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        return -1;
    }
}
