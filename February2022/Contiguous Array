Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

Example 1:
Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:
Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

class Solution {
    public int findMaxLength(int[] nums) {
        int max = 0;
        
        /*
        for(int i = 0; i < nums.length; i++){
            int count_0 = 0;
            int count_1 = 0;
            for(int j = i; j < nums.length; j++){
                if(nums[j] == 0){
                    count_0++;
                }else{
                    count_1++;
                }
                if(count_0 == count_1){
                    max = Math.max(max, j - i + 1);
                }
            }
        }
        return max;
        */
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                nums[i] = -1;
            }
        }
        int prefixSum = 0;
        
        for(int i = 0; i < nums.length; i++){
            prefixSum = prefixSum + nums[i];
            
            if(map.containsKey(prefixSum)){
                if(max < i - map.get(prefixSum)){
                    max = i - map.get(prefixSum);
                }
            }
            map.putIfAbsent(prefixSum, i);
        }
        return max;
    }
}
