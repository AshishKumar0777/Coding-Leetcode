You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.
Return a list answer of size 2 where:
answer[0] is a list of all players that have not lost any matches.
answer[1] is a list of all players that have lost exactly one match.
The values in the two lists should be returned in increasing order.
Note:
You should only consider the players that have played at least one match.
The testcases will be generated such that no two matches will have the same outcome. 

Example 1:
Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].

Example 2:
Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = []. 

Constraints:
1 <= matches.length <= 105
matches[i].length == 2
1 <= winneri, loseri <= 105
winneri != loseri
All matches[i] are unique.

class Solution {
    public List<List<Integer>> findWinners(int[][] matches) {
        List<List<Integer>> ans = new ArrayList<>();
        /*
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        int[] freq = new int[100001];
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < matches.length; i++){
            int value = matches[i][1];
            map.put(value, map.getOrDefault(matches[i][1], 0)+1);
            freq[value]++;
        }
        
        Arrays.sort(matches, (a, b)-> a[0] - b[0]);
        for(int i = 0; i < matches.length; i++){
            int index = matches[i][0];
            if(freq[index] == 0){
                if(!list1.contains(index))
                    list1.add(index);
            }
            // }else if(freq[index] == 1){
            //     if(!list2.contains(index))
            //         list2.add(index);
            // }
        }
        
        for(int x : map.keySet()){
            if(map.get(x) == 1)
                list2.add(x);
        }
        ans.add(list1);
        ans.add(list2);
        return ans;
        */
        Set<Integer> allPlayers = new HashSet<>();
        Set<Integer> losers = new HashSet<>();
        Map<Integer, Integer> map = new HashMap<>();
        Set<Integer> nonLosers = new HashSet<>();
        Set<Integer> lostOneMatch = new HashSet<>();
        
        for(int[] match : matches){
            allPlayers.add(match[0]);
            allPlayers.add(match[1]);
            losers.add(match[1]);
            
            map.put(match[1], map.getOrDefault(match[1], 0)+1);
        }
        
        for(int val : allPlayers){
            if(!losers.contains(val))
                nonLosers.add(val);
        }
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if(entry.getValue() == 1)
                lostOneMatch.add(entry.getKey());
        }
        
        List<Integer> nonLosersList = new ArrayList<>(nonLosers);
        Collections.sort(nonLosersList);
        
        ans.add(new ArrayList<>(nonLosersList));
        
        List<Integer> lostOneMatchList = new ArrayList<>(lostOneMatch);
        Collections.sort(lostOneMatchList);
        
        ans.add(new ArrayList<>(lostOneMatchList));
        
        return ans;
    }
}
