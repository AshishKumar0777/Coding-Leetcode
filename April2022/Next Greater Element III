Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 
integer exists, return -1.
Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1. 

Example 1:
Input: n = 12
Output: 21

Example 2:
Input: n = 21
Output: -1

class Solution {
    public int nextGreaterElement(int n) {
        char[] nums = (n+"").toCharArray();
        
        int i = nums.length - 2;
        
        while(i >= 0 && nums[i+1] <= nums[i]){
            i--;
        }
        
        if(i >= 0){
            int j = nums.length - 1;
            while(nums[j] <= nums[i]){
                j--;
            }
            swap(nums, i, j);
            reverse(nums, i+1);
            String str = String.valueOf(nums);
            long f = Long.parseLong(str);
            if(f > Integer.MAX_VALUE)
                return -1;
            else
            return Integer.parseInt(str);
        }
        return -1;
    }
    
    private void swap(char[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
            nums[j] = (char)temp;
    }
    
    private void reverse(char[] nums, int i){
        int j = nums.length-1;
        while(j > i){
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = (char)temp;
            j--;
            i++;
        }
    }
}
