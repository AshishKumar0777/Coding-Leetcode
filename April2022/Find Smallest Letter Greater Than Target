Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.
Note that the letters wrap around.
For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'. 

Example 1:
Input: letters = ["c","f","j"], target = "a"
Output: "c"

Example 2:
Input: letters = ["c","f","j"], target = "c"
Output: "f"

Example 3:
Input: letters = ["c","f","j"], target = "d"
Output: "f"

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        /*
        int val = search(letters, target);
        
        if(val >= 0 && val < letters.length-1){
            //return letters[val+1];
            for(int i = 0; i < letters.length; i++){
                if(letters[i] > target)
                    return letters[i];
            }
        }else if(val >= 0 && val >= letters.length-1){
            return letters[0];
        }else{
            for(int i = 0; i < letters.length; i++){
                if(letters[i] > target)
                    return letters[i];
            }
        }
        return letters[0];
    }
    
    private int search(char[] letters, char target){
        int start = 0;
        int end = letters.length - 1;
        
        while(start <= end){
            int mid = end + (start - end)/2;
            if(letters[mid] == target)
                return mid;
            else if(letters[mid] > target)
                end = mid - 1;
            else
                start = mid+1;
        }
        return -1;
        */
        int lo = 0, hi = letters.length;
        while (lo < hi) {
            int mi = lo + (hi - lo) / 2;
            if (letters[mi] <= target) lo = mi + 1;
            else hi = mi;
        }
        return letters[lo % letters.length];
    }
}
