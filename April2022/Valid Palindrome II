Given a string s, return true if the s can be palindrome after deleting at most one character from it. 

Example 1:
Input: s = "aba"
Output: true

Example 2:
Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.

Example 3:
Input: s = "abc"
Output: false

class Solution {
    public boolean validPalindrome(String s) {
        /*
        if(s.length() == 0) return false;
        boolean res = false;
        for(int i = 0; i < s.length(); i++){
            int count = 0;
            String ans = s.substring(0,i) + s.substring(i+1,s.length());
            if(reverseS(ans)){
                res = true;
                count++;
            }
            if(count == 1) break;
        }
        return res;
    }
    
    private boolean reverseS(String ans){
        String temp = ans;
        char[] ch = ans.toCharArray();
        
        int i = 0, j = ch.length-1;
        while(i < j){
            char t = ch[i];
            ch[i] = ch[j];
            ch[j] = t;
            i++;
            j--;
        }
        String str = String.valueOf(ch);
        return ans.equals(str);
        */
        
        int i = 0, j = s.length()-1;
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                return (checkPalindrome(s, i, j-1) || checkPalindrome(s, i+1, j));
            }
            i++;
            j--;
        }
        return true;
    }
    
    private boolean checkPalindrome(String s, int i, int j){
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
