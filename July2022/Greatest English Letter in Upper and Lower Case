Given a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. The returned letter should be in 
uppercase. If no such letter exists, return an empty string.
An English letter b is greater than another letter a if b appears after a in the English alphabet. 

Example 1:
Input: s = "lEeTcOdE"
Output: "E"
Explanation:
The letter 'E' is the only letter to appear in both lower and upper case.

Example 2:
Input: s = "arRAzFif"
Output: "R"
Explanation:
The letter 'R' is the greatest letter to appear in both lower and upper case.
Note that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.

Example 3:
Input: s = "AbCdEfGhIjK"
Output: ""
Explanation:
There is no letter that appears in both lower and upper case. 

Constraints:
1 <= s.length <= 1000
s consists of lowercase and uppercase English letters.

class Solution {
    
    
    // String result = "";
    
    public String greatestLetter(String s) {
        /*
        if(s.length() == 0){
            return s;
        }
        
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(Character.isUpperCase(c)){
                char temp = (char)(c + 32);
                if(s.contains(temp+"")){
                    if(result.length() == 0){
                        result = c + "";
                    }else{
                        char c1 = result.charAt(0);
                        
                        if(c >= c1){
                            result = c + "";
                        }
                    }
                }
            }
        }
        return result;
        */
    int[] counts = new int[256];
        for(char c : s.toCharArray()) {
            counts[c]++;
        }
        
        String resp = "";
        for(int i=90;i>=65;i--) {
            if(counts[i]>0 && counts[i+32]>0)
                return (char)(i)+"";
        }
            
            return "";
    }
}
